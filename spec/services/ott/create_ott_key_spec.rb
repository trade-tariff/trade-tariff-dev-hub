RSpec.describe Ott::CreateOttKey do
  subject(:create_ott_key) { described_class.new }

  let(:organisation) { create(:organisation) }
  let(:description) { "Test OTT Key" }
  let(:scopes) { %w[read write] }

  describe "#call" do
    # rubocop:disable RSpec/ExampleLength
    it "creates and saves an OTT key with valid attributes", :aggregate_failures do
      result = create_ott_key.call(organisation.id, description, scopes)

      expect(result.id).to be_a_uuid
      expect(result.organisation_id).to eq(organisation.id)
      expect(result.secret).to be_a_secret
      expect(result.client_id).to be_an_ott_client_id
      expect(result.description).to eq(description)
      expect(result.scopes).to eq(scopes)
      expect(result.created_at).to be_present
      expect(result.updated_at).to be_present
      expect(result).to be_persisted
    end
    # rubocop:enable RSpec/ExampleLength

    it "generates a unique client_id" do
      key1 = create_ott_key.call(organisation.id, description, scopes)
      key2 = create_ott_key.call(organisation.id, description, scopes)

      expect(key1.client_id).not_to eq(key2.client_id)
    end

    it "generates a unique secret" do
      key1 = create_ott_key.call(organisation.id, description, scopes)
      key2 = create_ott_key.call(organisation.id, description, scopes)

      expect(key1.secret).not_to eq(key2.secret)
    end

    it "uses default scopes if not provided" do
      result = create_ott_key.call(organisation.id, description)

      expect(result.scopes).to eq(%w[read write])
    end

    it "generates a default description if not provided", :aggregate_failures do
      result = create_ott_key.call(organisation.id, nil)

      expect(result.description).to be_present
      expect(result.description).to include("Autogenerated")
    end
  end
end
